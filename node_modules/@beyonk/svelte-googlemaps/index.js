(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Googlemaps = {}));
}(this, (function (exports) { 'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function loader (urls, test, callback) {
      let remaining = urls.length;

      function maybeCallback () {
        remaining = --remaining;
        if (remaining < 1) {
          callback();
        }
      }

      if (!test()) {
        urls.forEach(({ type, url, options = { async: true, defer: true }}) => {
          const isScript = type === 'script';
          const tag = document.createElement(isScript ? 'script': 'link');
          if (isScript) {
            tag.src = url;
            tag.async = options.async;
            tag.defer = options.defer;
          } else {
            tag.rel = 'stylesheet';
    		    tag.href = url;
          }
          tag.onload = maybeCallback;
          document.body.appendChild(tag);
        });
      } else {
        callback();
      }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const mapsLoaded = writable(false);
    const mapsLoading = writable(false);

    /* src/GoogleSdk.svelte generated by Svelte v3.31.0 */

    function instance($$self, $$props, $$invalidate) {
    	let $mapsLoaded;
    	let $mapsLoading;
    	component_subscribe($$self, mapsLoaded, $$value => $$invalidate(1, $mapsLoaded = $$value));
    	component_subscribe($$self, mapsLoading, $$value => $$invalidate(2, $mapsLoading = $$value));
    	const dispatch = createEventDispatcher();
    	let { apiKey } = $$props;

    	onMount(() => {
    		window.byGmapsReady = () => {
    			mapsLoaded.set(true);
    			delete window.byGmapsReady;
    		};

    		if ($mapsLoaded) {
    			dispatch("ready");
    		}

    		if (!$mapsLoading) {
    			const url = [
    				"//maps.googleapis.com/maps/api/js?",
    				apiKey ? `key=${apiKey}&` : "",
    				"libraries=places&callback=byGmapsReady"
    			].join("");

    			mapsLoading.set(true);

    			loader(
    				[{ type: "script", url }],
    				() => {
    					return $mapsLoaded;
    				},
    				() => {
    					
    				}
    			);
    		}
    	});

    	$$self.$$set = $$props => {
    		if ("apiKey" in $$props) $$invalidate(0, apiKey = $$props.apiKey);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$mapsLoaded*/ 2) {
    			 $mapsLoaded && dispatch("ready");
    		}
    	};

    	return [apiKey, $mapsLoaded];
    }

    class GoogleSdk extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance, null, safe_not_equal, { apiKey: 0 });
    	}
    }

    const key = {};

    function styleInject(css, ref) {
      if ( ref === void 0 ) ref = {};
      var insertAt = ref.insertAt;

      if (!css || typeof document === 'undefined') { return; }

      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';

      if (insertAt === 'top') {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
    }

    var css_248z = ".map.svelte-16q73l0{height:100%;width:100%}";
    styleInject(css_248z);

    /* src/GoogleMap.svelte generated by Svelte v3.31.0 */

    function create_if_block(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

    	return {
    		c() {
    			if (default_slot) default_slot.c();
    		},
    		m(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 4096) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
    				}
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    function create_fragment(ctx) {
    	let googlesdk;
    	let t;
    	let div;
    	let current;
    	googlesdk = new GoogleSdk({ props: { apiKey: /*apiKey*/ ctx[0] } });
    	googlesdk.$on("ready", /*initialise*/ ctx[3]);
    	let if_block = /*map*/ ctx[2] && create_if_block(ctx);

    	return {
    		c() {
    			create_component(googlesdk.$$.fragment);
    			t = space();
    			div = element("div");
    			if (if_block) if_block.c();
    			attr(div, "class", "map svelte-16q73l0");
    		},
    		m(target, anchor) {
    			mount_component(googlesdk, target, anchor);
    			insert(target, t, anchor);
    			insert(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			/*div_binding*/ ctx[14](div);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const googlesdk_changes = {};
    			if (dirty & /*apiKey*/ 1) googlesdk_changes.apiKey = /*apiKey*/ ctx[0];
    			googlesdk.$set(googlesdk_changes);

    			if (/*map*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*map*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(googlesdk.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(googlesdk.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(googlesdk, detaching);
    			if (detaching) detach(t);
    			if (detaching) detach(div);
    			if (if_block) if_block.d();
    			/*div_binding*/ ctx[14](null);
    		}
    	};
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;

    	setContext(key, {
    		getMap: () => map,
    		getGoogleMap: () => mapElement
    	});

    	const dispatch = createEventDispatcher();
    	let { apiKey } = $$props;
    	let mapElement;
    	let map;
    	let { center = null } = $$props;
    	let { zoom = 8 } = $$props;
    	let { options = {} } = $$props;

    	function getDomBounds() {
    		return mapElement.getBoundingClientRect();
    	}

    	function getDefaultView() {
    		return mapElement.ownerDocument.defaultView;
    	}

    	function setHeight(height) {
    		$$invalidate(1, mapElement.style.height = height, mapElement);
    	}

    	function setMaxHeight(height) {
    		$$invalidate(1, mapElement.style.maxHeight = height, mapElement);
    	}

    	function setCentre(location) {
    		map.setCenter(location);
    	}

    	function initialise() {
    		setTimeout(
    			() => {
    				const google = window.google;
    				$$invalidate(2, map = new google.maps.Map(mapElement, Object.assign({ center, zoom }, options)));

    				google.maps.event.addListener(map, "dragend", () => {
    					const location = map.getCenter();
    					$$invalidate(4, center = location);
    					dispatch("recentre", { location });
    				});

    				dispatch("ready");
    			},
    			1
    		);
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			mapElement = $$value;
    			$$invalidate(1, mapElement);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("apiKey" in $$props) $$invalidate(0, apiKey = $$props.apiKey);
    		if ("center" in $$props) $$invalidate(4, center = $$props.center);
    		if ("zoom" in $$props) $$invalidate(5, zoom = $$props.zoom);
    		if ("options" in $$props) $$invalidate(6, options = $$props.options);
    		if ("$$scope" in $$props) $$invalidate(12, $$scope = $$props.$$scope);
    	};

    	return [
    		apiKey,
    		mapElement,
    		map,
    		initialise,
    		center,
    		zoom,
    		options,
    		getDomBounds,
    		getDefaultView,
    		setHeight,
    		setMaxHeight,
    		setCentre,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class GoogleMap extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$1, create_fragment, safe_not_equal, {
    			apiKey: 0,
    			center: 4,
    			zoom: 5,
    			options: 6,
    			getDomBounds: 7,
    			getDefaultView: 8,
    			setHeight: 9,
    			setMaxHeight: 10,
    			setCentre: 11
    		});
    	}

    	get getDomBounds() {
    		return this.$$.ctx[7];
    	}

    	get getDefaultView() {
    		return this.$$.ctx[8];
    	}

    	get setHeight() {
    		return this.$$.ctx[9];
    	}

    	get setMaxHeight() {
    		return this.$$.ctx[10];
    	}

    	get setCentre() {
    		return this.$$.ctx[11];
    	}
    }

    /* src/GooglePlacesAutocomplete.svelte generated by Svelte v3.31.0 */

    function create_fragment$1(ctx) {
    	let googlesdk;
    	let t;
    	let input;
    	let current;
    	let mounted;
    	let dispose;
    	googlesdk = new GoogleSdk({ props: { apiKey: /*apiKey*/ ctx[2] } });
    	googlesdk.$on("ready", /*initialise*/ ctx[9]);

    	return {
    		c() {
    			create_component(googlesdk.$$.fragment);
    			t = space();
    			input = element("input");
    			attr(input, "id", /*id*/ ctx[1]);
    			attr(input, "aria-label", /*ariaLabel*/ ctx[3]);
    			attr(input, "class", /*styleClass*/ ctx[5]);
    			attr(input, "placeholder", /*placeholder*/ ctx[4]);
    			attr(input, "type", "text");
    			input.disabled = /*disabled*/ ctx[7];
    		},
    		m(target, anchor) {
    			mount_component(googlesdk, target, anchor);
    			insert(target, t, anchor);
    			insert(target, input, anchor);
    			/*input_binding*/ ctx[16](input);
    			set_input_value(input, /*viewValue*/ ctx[0]);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(input, "input", /*input_input_handler*/ ctx[17]),
    					listen(input, "blur", /*blur*/ ctx[8]),
    					listen(input, "keydown", autocompleteKeydown)
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			const googlesdk_changes = {};
    			if (dirty & /*apiKey*/ 4) googlesdk_changes.apiKey = /*apiKey*/ ctx[2];
    			googlesdk.$set(googlesdk_changes);

    			if (!current || dirty & /*id*/ 2) {
    				attr(input, "id", /*id*/ ctx[1]);
    			}

    			if (!current || dirty & /*ariaLabel*/ 8) {
    				attr(input, "aria-label", /*ariaLabel*/ ctx[3]);
    			}

    			if (!current || dirty & /*styleClass*/ 32) {
    				attr(input, "class", /*styleClass*/ ctx[5]);
    			}

    			if (!current || dirty & /*placeholder*/ 16) {
    				attr(input, "placeholder", /*placeholder*/ ctx[4]);
    			}

    			if (!current || dirty & /*disabled*/ 128) {
    				input.disabled = /*disabled*/ ctx[7];
    			}

    			if (dirty & /*viewValue*/ 1 && input.value !== /*viewValue*/ ctx[0]) {
    				set_input_value(input, /*viewValue*/ ctx[0]);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(googlesdk.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(googlesdk.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(googlesdk, detaching);
    			if (detaching) detach(t);
    			if (detaching) detach(input);
    			/*input_binding*/ ctx[16](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function dropdownVisible() {
    	return document.querySelectorAll(".pac-container")[0].offsetParent !== null;
    }

    function autocompleteKeydown(e) {
    	if (e.keyCode === 13 && dropdownVisible()) {
    		e.preventDefault();
    	}
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { id = `gm-autocomplete-${Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 5)}` } = $$props;
    	let { apiKey = null } = $$props;
    	let { ariaLabel = "location" } = $$props;
    	let { placeholder = "Location" } = $$props;
    	let { styleClass = "" } = $$props;
    	let { value = null } = $$props;
    	let { viewValue = null } = $$props;
    	let { viewLabel = "formatted_address" } = $$props;
    	let { fields = ["geometry", viewLabel] } = $$props;
    	let { types = ["(regions)"] } = $$props;
    	let { options = {} } = $$props;
    	let search;
    	let autocomplete;
    	let currentPlace;
    	let disabled = true;
    	const dispatch = createEventDispatcher();

    	function clear() {
    		$$invalidate(10, value = null);
    		$$invalidate(0, viewValue = null);
    		currentPlace = null;
    		dispatch("clear");
    	}

    	function blur() {
    		dispatch("blur");

    		if (viewValue !== (currentPlace && currentPlace[viewLabel])) {
    			clear();
    		}
    	}

    	function initialise() {
    		const google = window.google;
    		autocomplete = new google.maps.places.Autocomplete(search, Object.assign({ fields, types }, options));
    		$$invalidate(7, disabled = false);

    		autocomplete.addListener("place_changed", () => {
    			const place = autocomplete.getPlace();

    			if (place.geometry) {
    				$$invalidate(0, viewValue = place[viewLabel]);
    				$$invalidate(10, value = viewValue);
    				currentPlace = place;
    				dispatch("placeChanged", { place, selectedPrediction: search.value });
    			}
    		});

    		dispatch("ready");
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			search = $$value;
    			$$invalidate(6, search);
    		});
    	}

    	function input_input_handler() {
    		viewValue = this.value;
    		$$invalidate(0, viewValue);
    	}

    	$$self.$$set = $$props => {
    		if ("id" in $$props) $$invalidate(1, id = $$props.id);
    		if ("apiKey" in $$props) $$invalidate(2, apiKey = $$props.apiKey);
    		if ("ariaLabel" in $$props) $$invalidate(3, ariaLabel = $$props.ariaLabel);
    		if ("placeholder" in $$props) $$invalidate(4, placeholder = $$props.placeholder);
    		if ("styleClass" in $$props) $$invalidate(5, styleClass = $$props.styleClass);
    		if ("value" in $$props) $$invalidate(10, value = $$props.value);
    		if ("viewValue" in $$props) $$invalidate(0, viewValue = $$props.viewValue);
    		if ("viewLabel" in $$props) $$invalidate(11, viewLabel = $$props.viewLabel);
    		if ("fields" in $$props) $$invalidate(12, fields = $$props.fields);
    		if ("types" in $$props) $$invalidate(13, types = $$props.types);
    		if ("options" in $$props) $$invalidate(14, options = $$props.options);
    	};

    	return [
    		viewValue,
    		id,
    		apiKey,
    		ariaLabel,
    		placeholder,
    		styleClass,
    		search,
    		disabled,
    		blur,
    		initialise,
    		value,
    		viewLabel,
    		fields,
    		types,
    		options,
    		clear,
    		input_binding,
    		input_input_handler
    	];
    }

    class GooglePlacesAutocomplete extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$2, create_fragment$1, safe_not_equal, {
    			id: 1,
    			apiKey: 2,
    			ariaLabel: 3,
    			placeholder: 4,
    			styleClass: 5,
    			value: 10,
    			viewValue: 0,
    			viewLabel: 11,
    			fields: 12,
    			types: 13,
    			options: 14,
    			clear: 15
    		});
    	}

    	get clear() {
    		return this.$$.ctx[15];
    	}
    }

    /* src/GoogleMapMarker.svelte generated by Svelte v3.31.0 */

    function instance$3($$self, $$props, $$invalidate) {
    	const { getMap } = getContext(key);
    	const map = getMap();
    	let { lat } = $$props;
    	let { lng } = $$props;
    	let { icon } = $$props;

    	// eslint-disable-next-line no-new
    	new window.google.maps.Marker({ position: { lat, lng }, icon, map });

    	$$self.$$set = $$props => {
    		if ("lat" in $$props) $$invalidate(0, lat = $$props.lat);
    		if ("lng" in $$props) $$invalidate(1, lng = $$props.lng);
    		if ("icon" in $$props) $$invalidate(2, icon = $$props.icon);
    	};

    	return [lat, lng, icon];
    }

    class GoogleMapMarker extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$3, null, safe_not_equal, { lat: 0, lng: 1, icon: 2 });
    	}
    }

    exports.GoogleMap = GoogleMap;
    exports.GoogleMapMarker = GoogleMapMarker;
    exports.GooglePlacesAutocomplete = GooglePlacesAutocomplete;
    exports.GoogleSdk = GoogleSdk;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
